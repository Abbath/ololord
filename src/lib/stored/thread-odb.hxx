// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef THREAD_ODB_HXX
#define THREAD_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2030000 // 2.3.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/sqlite/qstring-traits.hxx>
#include <odb/qt/basic/sqlite/qbyte-array-traits.hxx>
#include <odb/qt/basic/sqlite/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/sqlite/qdate-traits.hxx>
#include <odb/qt/date-time/sqlite/qtime-traits.hxx>
#include <odb/qt/date-time/sqlite/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include "thread.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Thread
  //
  template <>
  struct class_traits< ::Thread >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Thread >
  {
    public:
    typedef ::Thread object_type;
    typedef ::QSharedPointer< ::Thread > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint64 id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ThreadCount
  //
  template <>
  struct class_traits< ::ThreadCount >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::ThreadCount >
  {
    public:
    typedef ::ThreadCount view_type;
    typedef ::QSharedPointer< ::ThreadCount > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // ThreadIdDateTimeFixed
  //
  template <>
  struct class_traits< ::ThreadIdDateTimeFixed >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::ThreadIdDateTimeFixed >
  {
    public:
    typedef ::ThreadIdDateTimeFixed view_type;
    typedef ::QSharedPointer< ::ThreadIdDateTimeFixed > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // Post
  //
  template <>
  struct class_traits< ::Post >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::Post >
  {
    public:
    typedef ::Post object_type;
    typedef ::QSharedPointer< ::Post > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint64 id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // PostCount
  //
  template <>
  struct class_traits< ::PostCount >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::PostCount >
  {
    public:
    typedef ::PostCount view_type;
    typedef ::QSharedPointer< ::PostCount > pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // Thread
  //
  template <typename A>
  struct query_columns< ::Thread, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::quint64,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // board
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    board_type_;

    static const board_type_ board;

    // number
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::quint64,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    number_type_;

    static const number_type_ number;

    // dateTime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QDateTime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    dateTime_type_;

    static const dateTime_type_ dateTime;

    // fixed
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    fixed_type_;

    static const fixed_type_ fixed;

    // postingEnabled
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    postingEnabled_type_;

    static const postingEnabled_type_ postingEnabled;
  };

  template <typename A>
  const typename query_columns< ::Thread, id_sqlite, A >::id_type_
  query_columns< ::Thread, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::Thread, id_sqlite, A >::board_type_
  query_columns< ::Thread, id_sqlite, A >::
  board (A::table_name, "\"board\"", 0);

  template <typename A>
  const typename query_columns< ::Thread, id_sqlite, A >::number_type_
  query_columns< ::Thread, id_sqlite, A >::
  number (A::table_name, "\"number\"", 0);

  template <typename A>
  const typename query_columns< ::Thread, id_sqlite, A >::dateTime_type_
  query_columns< ::Thread, id_sqlite, A >::
  dateTime (A::table_name, "\"dateTime\"", 0);

  template <typename A>
  const typename query_columns< ::Thread, id_sqlite, A >::fixed_type_
  query_columns< ::Thread, id_sqlite, A >::
  fixed (A::table_name, "\"fixed\"", 0);

  template <typename A>
  const typename query_columns< ::Thread, id_sqlite, A >::postingEnabled_type_
  query_columns< ::Thread, id_sqlite, A >::
  postingEnabled (A::table_name, "\"postingEnabled\"", 0);

  template <typename A>
  struct pointer_query_columns< ::Thread, id_sqlite, A >:
    query_columns< ::Thread, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Thread, id_sqlite >:
    public access::object_traits< ::Thread >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // board_
      //
      details::buffer board_value;
      std::size_t board_size;
      bool board_null;

      // number_
      //
      long long number_value;
      bool number_null;

      // dateTime_
      //
      details::buffer dateTime_value;
      std::size_t dateTime_size;
      bool dateTime_null;

      // fixed_
      //
      long long fixed_value;
      bool fixed_null;

      // postingEnabled_
      //
      long long postingEnabled_value;
      bool postingEnabled_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // posts_
    //
    struct posts_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::Thread::Posts container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< posts_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Thread, id_common >:
    public access::object_traits_impl< ::Thread, id_sqlite >
  {
  };

  // ThreadCount
  //
  template <>
  class access::view_traits_impl< ::ThreadCount, id_sqlite >:
    public access::view_traits< ::ThreadCount >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::ThreadCount, id_common >:
    public access::view_traits_impl< ::ThreadCount, id_sqlite >
  {
  };

  // ThreadIdDateTimeFixed
  //
  template <>
  class access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >:
    public access::view_traits< ::ThreadIdDateTimeFixed >
  {
    public:
    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // dateTime
      //
      details::buffer dateTime_value;
      std::size_t dateTime_size;
      bool dateTime_null;

      // fixed
      //
      long long fixed_value;
      bool fixed_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 3UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::ThreadIdDateTimeFixed, id_common >:
    public access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >
  {
  };

  // Post
  //
  template <typename A>
  struct pointer_query_columns< ::Post, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::quint64,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // board
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    board_type_;

    static const board_type_ board;

    // number
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::quint64,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    number_type_;

    static const number_type_ number;

    // dateTime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QDateTime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    dateTime_type_;

    static const dateTime_type_ dateTime;

    // bannedFor
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bannedFor_type_;

    static const bannedFor_type_ bannedFor;

    // email
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    email_type_;

    static const email_type_ email;

    // files
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QByteArray,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    files_type_;

    static const files_type_ files;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // password
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QByteArray,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    password_type_;

    static const password_type_ password;

    // posterIp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    posterIp_type_;

    static const posterIp_type_ posterIp;

    // subject
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    subject_type_;

    static const subject_type_ subject;

    // text
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    text_type_;

    static const text_type_ text;

    // thread
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::quint64,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    thread_type_;

    static const thread_type_ thread;
  };

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::id_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::board_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  board (A::table_name, "\"board\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::number_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  number (A::table_name, "\"number\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::dateTime_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  dateTime (A::table_name, "\"dateTime\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::bannedFor_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  bannedFor (A::table_name, "\"bannedFor\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::email_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  email (A::table_name, "\"email\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::files_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  files (A::table_name, "\"files\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::name_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::password_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  password (A::table_name, "\"password\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::posterIp_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  posterIp (A::table_name, "\"posterIp\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::subject_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  subject (A::table_name, "\"subject\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::text_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  text (A::table_name, "\"text\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::Post, id_sqlite, A >::thread_type_
  pointer_query_columns< ::Post, id_sqlite, A >::
  thread (A::table_name, "\"thread\"", 0);

  template <>
  class access::object_traits_impl< ::Post, id_sqlite >:
    public access::object_traits< ::Post >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // board_
      //
      details::buffer board_value;
      std::size_t board_size;
      bool board_null;

      // number_
      //
      long long number_value;
      bool number_null;

      // dateTime_
      //
      details::buffer dateTime_value;
      std::size_t dateTime_size;
      bool dateTime_null;

      // bannedFor_
      //
      long long bannedFor_value;
      bool bannedFor_null;

      // email_
      //
      details::buffer email_value;
      std::size_t email_size;
      bool email_null;

      // files_
      //
      details::buffer files_value;
      std::size_t files_size;
      bool files_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // password_
      //
      details::buffer password_value;
      std::size_t password_size;
      bool password_null;

      // posterIp_
      //
      details::buffer posterIp_value;
      std::size_t posterIp_size;
      bool posterIp_null;

      // subject_
      //
      details::buffer subject_value;
      std::size_t subject_size;
      bool subject_null;

      // text_
      //
      details::buffer text_value;
      std::size_t text_size;
      bool text_null;

      // thread_
      //
      long long thread_value;
      bool thread_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct thread_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 13UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::Post, id_common >:
    public access::object_traits_impl< ::Post, id_sqlite >
  {
  };

  // PostCount
  //
  template <>
  class access::view_traits_impl< ::PostCount, id_sqlite >:
    public access::view_traits< ::PostCount >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::PostCount, id_common >:
    public access::view_traits_impl< ::PostCount, id_sqlite >
  {
  };

  // Thread
  //
  // ThreadCount
  //
  struct access::view_traits_impl< ::ThreadCount, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::Thread,
      id_sqlite,
      odb::access::object_traits_impl< ::Thread, id_sqlite > >
  {
  };

  // ThreadIdDateTimeFixed
  //
  struct access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::Thread,
      id_sqlite,
      odb::access::object_traits_impl< ::Thread, id_sqlite > >
  {
  };

  // Post
  //
  template <>
  struct alias_traits<
    ::Thread,
    id_sqlite,
    access::object_traits_impl< ::Post, id_sqlite >::thread_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::Post, id_sqlite >
  {
    // thread
    //
    typedef
    odb::alias_traits<
      ::Thread,
      id_sqlite,
      access::object_traits_impl< ::Post, id_sqlite >::thread_tag>
    thread_alias_;
  };

  template <typename A>
  struct query_columns< ::Post, id_sqlite, A >:
    query_columns_base< ::Post, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::quint64,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // board
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    board_type_;

    static const board_type_ board;

    // number
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::quint64,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    number_type_;

    static const number_type_ number;

    // dateTime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QDateTime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    dateTime_type_;

    static const dateTime_type_ dateTime;

    // bannedFor
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bannedFor_type_;

    static const bannedFor_type_ bannedFor;

    // email
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    email_type_;

    static const email_type_ email;

    // files
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QByteArray,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    files_type_;

    static const files_type_ files;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // password
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QByteArray,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    password_type_;

    static const password_type_ password;

    // posterIp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    posterIp_type_;

    static const posterIp_type_ posterIp;

    // subject
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    subject_type_;

    static const subject_type_ subject;

    // text
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    text_type_;

    static const text_type_ text;

    // thread
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::quint64,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    thread_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::Thread,
        id_sqlite,
        thread_alias_ > >
    thread_pointer_type_;

    struct thread_type_: thread_pointer_type_, thread_column_type_
    {
      thread_type_ (const char* t, const char* c, const char* conv)
        : thread_column_type_ (t, c, conv)
      {
      }
    };

    static const thread_type_ thread;
  };

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::id_type_
  query_columns< ::Post, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::board_type_
  query_columns< ::Post, id_sqlite, A >::
  board (A::table_name, "\"board\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::number_type_
  query_columns< ::Post, id_sqlite, A >::
  number (A::table_name, "\"number\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::dateTime_type_
  query_columns< ::Post, id_sqlite, A >::
  dateTime (A::table_name, "\"dateTime\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::bannedFor_type_
  query_columns< ::Post, id_sqlite, A >::
  bannedFor (A::table_name, "\"bannedFor\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::email_type_
  query_columns< ::Post, id_sqlite, A >::
  email (A::table_name, "\"email\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::files_type_
  query_columns< ::Post, id_sqlite, A >::
  files (A::table_name, "\"files\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::name_type_
  query_columns< ::Post, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::password_type_
  query_columns< ::Post, id_sqlite, A >::
  password (A::table_name, "\"password\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::posterIp_type_
  query_columns< ::Post, id_sqlite, A >::
  posterIp (A::table_name, "\"posterIp\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::subject_type_
  query_columns< ::Post, id_sqlite, A >::
  subject (A::table_name, "\"subject\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::text_type_
  query_columns< ::Post, id_sqlite, A >::
  text (A::table_name, "\"text\"", 0);

  template <typename A>
  const typename query_columns< ::Post, id_sqlite, A >::thread_type_
  query_columns< ::Post, id_sqlite, A >::
  thread (A::table_name, "\"thread\"", 0);

  // PostCount
  //
  struct access::view_traits_impl< ::PostCount, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::Post,
      id_sqlite,
      odb::access::object_traits_impl< ::Post, id_sqlite > >
  {
  };
}

#include "thread-odb.ixx"

#include <odb/post.hxx>

#endif // THREAD_ODB_HXX
