// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef BANNEDUSER_ODB_HXX
#define BANNEDUSER_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

// Begin prologue.
//
#include <odb/qt/version.hxx>
#if ODB_QT_VERSION != 2030000 // 2.3.0
#  error ODB and C++ compilers see different libodb-qt interface versions
#endif
#include <odb/qt/basic/sqlite/qstring-traits.hxx>
#include <odb/qt/basic/sqlite/qbyte-array-traits.hxx>
#include <odb/qt/basic/sqlite/quuid-traits.hxx>
#include <odb/qt/containers/qhash-traits.hxx>
#include <odb/qt/containers/qlist-traits.hxx>
#include <odb/qt/containers/qlinked-list-traits.hxx>
#include <odb/qt/containers/qmap-traits.hxx>
#include <odb/qt/containers/qset-traits.hxx>
#include <odb/qt/containers/qvector-traits.hxx>
#include <odb/qt/date-time/sqlite/qdate-traits.hxx>
#include <odb/qt/date-time/sqlite/qtime-traits.hxx>
#include <odb/qt/date-time/sqlite/qdate-time-traits.hxx>
#include <QtCore/QSharedPointer>
#include <odb/qt/smart-ptr/pointer-traits.hxx>
#include <odb/qt/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include "banneduser.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // BannedUser
  //
  template <>
  struct class_traits< ::BannedUser >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::BannedUser >
  {
    public:
    typedef ::BannedUser object_type;
    typedef ::QSharedPointer< ::BannedUser > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::quint64 id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // BannedUser
  //
  template <typename A>
  struct query_columns< ::BannedUser, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::quint64,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // board
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    board_type_;

    static const board_type_ board;

    // ip
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    ip_type_;

    static const ip_type_ ip;

    // dateTime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QDateTime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    dateTime_type_;

    static const dateTime_type_ dateTime;

    // expirationDateTime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QDateTime,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    expirationDateTime_type_;

    static const expirationDateTime_type_ expirationDateTime;

    // level
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    level_type_;

    static const level_type_ level;

    // reason
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::QString,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    reason_type_;

    static const reason_type_ reason;
  };

  template <typename A>
  const typename query_columns< ::BannedUser, id_sqlite, A >::id_type_
  query_columns< ::BannedUser, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::BannedUser, id_sqlite, A >::board_type_
  query_columns< ::BannedUser, id_sqlite, A >::
  board (A::table_name, "\"board\"", 0);

  template <typename A>
  const typename query_columns< ::BannedUser, id_sqlite, A >::ip_type_
  query_columns< ::BannedUser, id_sqlite, A >::
  ip (A::table_name, "\"ip\"", 0);

  template <typename A>
  const typename query_columns< ::BannedUser, id_sqlite, A >::dateTime_type_
  query_columns< ::BannedUser, id_sqlite, A >::
  dateTime (A::table_name, "\"dateTime\"", 0);

  template <typename A>
  const typename query_columns< ::BannedUser, id_sqlite, A >::expirationDateTime_type_
  query_columns< ::BannedUser, id_sqlite, A >::
  expirationDateTime (A::table_name, "\"expirationDateTime\"", 0);

  template <typename A>
  const typename query_columns< ::BannedUser, id_sqlite, A >::level_type_
  query_columns< ::BannedUser, id_sqlite, A >::
  level (A::table_name, "\"level\"", 0);

  template <typename A>
  const typename query_columns< ::BannedUser, id_sqlite, A >::reason_type_
  query_columns< ::BannedUser, id_sqlite, A >::
  reason (A::table_name, "\"reason\"", 0);

  template <typename A>
  struct pointer_query_columns< ::BannedUser, id_sqlite, A >:
    query_columns< ::BannedUser, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::BannedUser, id_sqlite >:
    public access::object_traits< ::BannedUser >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // board_
      //
      details::buffer board_value;
      std::size_t board_size;
      bool board_null;

      // ip_
      //
      details::buffer ip_value;
      std::size_t ip_size;
      bool ip_null;

      // dateTime_
      //
      details::buffer dateTime_value;
      std::size_t dateTime_size;
      bool dateTime_null;

      // expirationDateTime_
      //
      details::buffer expirationDateTime_value;
      std::size_t expirationDateTime_size;
      bool expirationDateTime_null;

      // level_
      //
      long long level_value;
      bool level_null;

      // reason_
      //
      details::buffer reason_value;
      std::size_t reason_size;
      bool reason_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::BannedUser, id_common >:
    public access::object_traits_impl< ::BannedUser, id_sqlite >
  {
  };

  // BannedUser
  //
}

#include "banneduser-odb.ixx"

#include <odb/post.hxx>

#endif // BANNEDUSER_ODB_HXX
