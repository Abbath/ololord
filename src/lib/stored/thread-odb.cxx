// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "thread-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/view-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>
#include <odb/sqlite/view-result.hxx>

namespace odb
{
  // Thread
  //

  struct access::object_traits_impl< ::Thread, id_sqlite >::extra_statement_cache_type
  {
    sqlite::container_statements_impl< posts_traits > posts_;

    extra_statement_cache_type (
      sqlite::connection& c,
      image_type&,
      sqlite::binding& id,
      sqlite::binding&)
    : posts_ (c, id)
    {
    }
  };

  // posts_
  //

  const char access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  select_statement[] =
  "SELECT "
  "\"posts\".\"id\" "
  "FROM \"posts\" "
  "WHERE \"posts\".\"thread\"=?";

  const char access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  insert_statement[] =
  "";

  const char access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  delete_statement[] =
  "";

  void access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  bind (sqlite::bind* b,
        const sqlite::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace sqlite;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = false;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  init (value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::Post > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.value_value,
          i.value_null);

        v = ptr_traits::pointer_type (
          *static_cast<sqlite::database*> (db), id);
      }
    }
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  insert (index_type, const value_type&, void*)
  {
  }

  bool access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  select (index_type&, value_type& v, void* d)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  delete_ (void*)
  {
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::posts_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace sqlite;
    using sqlite::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = false;
    container_traits_type::load (c, more, fs);
  }

  access::object_traits_impl< ::Thread, id_sqlite >::id_type
  access::object_traits_impl< ::Thread, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::Thread, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // board_
    //
    if (t[1UL])
    {
      i.board_value.capacity (i.board_size);
      grew = true;
    }

    // number_
    //
    t[2UL] = false;

    // dateTime_
    //
    if (t[3UL])
    {
      i.dateTime_value.capacity (i.dateTime_size);
      grew = true;
    }

    // fixed_
    //
    t[4UL] = false;

    // postingEnabled_
    //
    t[5UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // board_
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.board_value.data ();
    b[n].size = &i.board_size;
    b[n].capacity = i.board_value.capacity ();
    b[n].is_null = &i.board_null;
    n++;

    // number_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.number_value;
    b[n].is_null = &i.number_null;
    n++;

    // dateTime_
    //
    b[n].type = sqlite::image_traits<
      ::QDateTime,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.dateTime_value.data ();
    b[n].size = &i.dateTime_size;
    b[n].capacity = i.dateTime_value.capacity ();
    b[n].is_null = &i.dateTime_null;
    n++;

    // fixed_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.fixed_value;
    b[n].is_null = &i.fixed_null;
    n++;

    // postingEnabled_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.postingEnabled_value;
    b[n].is_null = &i.postingEnabled_null;
    n++;
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::Thread, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      ::quint64 const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // board_
    //
    {
      ::QString const& v =
        o.board_;

      bool is_null (false);
      std::size_t cap (i.board_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.board_value,
        i.board_size,
        is_null,
        v);
      i.board_null = is_null;
      grew = grew || (cap != i.board_value.capacity ());
    }

    // number_
    //
    {
      ::quint64 const& v =
        o.number_;

      bool is_null (false);
      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_image (
        i.number_value,
        is_null,
        v);
      i.number_null = is_null;
    }

    // dateTime_
    //
    {
      ::QDateTime const& v =
        o.dateTime_;

      bool is_null (false);
      std::size_t cap (i.dateTime_value.capacity ());
      sqlite::value_traits<
          ::QDateTime,
          sqlite::id_text >::set_image (
        i.dateTime_value,
        i.dateTime_size,
        is_null,
        v);
      i.dateTime_null = is_null;
      grew = grew || (cap != i.dateTime_value.capacity ());
    }

    // fixed_
    //
    {
      bool const& v =
        o.fixed_;

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.fixed_value,
        is_null,
        v);
      i.fixed_null = is_null;
    }

    // postingEnabled_
    //
    {
      bool const& v =
        o.postingEnabled_;

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.postingEnabled_value,
        is_null,
        v);
      i.postingEnabled_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::quint64& v =
        o.id_;

      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // board_
    //
    {
      ::QString& v =
        o.board_;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.board_value,
        i.board_size,
        i.board_null);
    }

    // number_
    //
    {
      ::quint64& v =
        o.number_;

      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_value (
        v,
        i.number_value,
        i.number_null);
    }

    // dateTime_
    //
    {
      ::QDateTime& v =
        o.dateTime_;

      sqlite::value_traits<
          ::QDateTime,
          sqlite::id_text >::set_value (
        v,
        i.dateTime_value,
        i.dateTime_size,
        i.dateTime_null);
    }

    // fixed_
    //
    {
      bool& v =
        o.fixed_;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.fixed_value,
        i.fixed_null);
    }

    // postingEnabled_
    //
    {
      bool& v =
        o.postingEnabled_;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.postingEnabled_value,
        i.postingEnabled_null);
    }
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::Thread, id_sqlite >::persist_statement[] =
  "INSERT INTO \"threads\" "
  "(\"id\", "
  "\"board\", "
  "\"number\", "
  "\"dateTime\", "
  "\"fixed\", "
  "\"postingEnabled\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::Thread, id_sqlite >::find_statement[] =
  "SELECT "
  "\"threads\".\"id\", "
  "\"threads\".\"board\", "
  "\"threads\".\"number\", "
  "\"threads\".\"dateTime\", "
  "\"threads\".\"fixed\", "
  "\"threads\".\"postingEnabled\" "
  "FROM \"threads\" "
  "WHERE \"threads\".\"id\"=?";

  const char access::object_traits_impl< ::Thread, id_sqlite >::update_statement[] =
  "UPDATE \"threads\" "
  "SET "
  "\"board\"=?, "
  "\"number\"=?, "
  "\"dateTime\"=?, "
  "\"fixed\"=?, "
  "\"postingEnabled\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::Thread, id_sqlite >::erase_statement[] =
  "DELETE FROM \"threads\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::Thread, id_sqlite >::query_statement[] =
  "SELECT "
  "\"threads\".\"id\", "
  "\"threads\".\"board\", "
  "\"threads\".\"number\", "
  "\"threads\".\"dateTime\", "
  "\"threads\".\"fixed\", "
  "\"threads\".\"postingEnabled\" "
  "FROM \"threads\"";

  const char access::object_traits_impl< ::Thread, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"threads\"";

  const char access::object_traits_impl< ::Thread, id_sqlite >::table_name[] =
  "\"threads\"";

  void access::object_traits_impl< ::Thread, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::Thread, id_sqlite >::pointer_type
  access::object_traits_impl< ::Thread, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Thread, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Thread, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Thread, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::Thread, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // posts_
    //
    {
      ::Thread::Posts& v =
        obj.posts_;

      posts_traits::load (
        v,
        esc.posts_);
    }
  }

  result< access::object_traits_impl< ::Thread, id_sqlite >::object_type >
  access::object_traits_impl< ::Thread, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Thread, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // ThreadCount
  //

  bool access::view_traits_impl< ::ThreadCount, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::ThreadCount, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;
  }

  void access::view_traits_impl< ::ThreadCount, id_sqlite >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      int& v =
        o.count;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.count_value,
        i.count_null);
    }
  }

  access::view_traits_impl< ::ThreadCount, id_sqlite >::query_base_type
  access::view_traits_impl< ::ThreadCount, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(\"threads\".\"id\") ");

    r += "FROM \"threads\"";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::ThreadCount, id_sqlite >::view_type >
  access::view_traits_impl< ::ThreadCount, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // ThreadIdDateTimeFixed
  //

  bool access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id
    //
    t[0UL] = false;

    // dateTime
    //
    if (t[1UL])
    {
      i.dateTime_value.capacity (i.dateTime_size);
      grew = true;
    }

    // fixed
    //
    t[2UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // id
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
    n++;

    // dateTime
    //
    b[n].type = sqlite::image_traits<
      ::QDateTime,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.dateTime_value.data ();
    b[n].size = &i.dateTime_size;
    b[n].capacity = i.dateTime_value.capacity ();
    b[n].is_null = &i.dateTime_null;
    n++;

    // fixed
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.fixed_value;
    b[n].is_null = &i.fixed_null;
    n++;
  }

  void access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id
    //
    {
      ::quint64& v =
        o.id;

      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // dateTime
    //
    {
      ::QDateTime& v =
        o.dateTime;

      sqlite::value_traits<
          ::QDateTime,
          sqlite::id_text >::set_value (
        v,
        i.dateTime_value,
        i.dateTime_size,
        i.dateTime_null);
    }

    // fixed
    //
    {
      bool& v =
        o.fixed;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.fixed_value,
        i.fixed_null);
    }
  }

  access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >::query_base_type
  access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"threads\".\"id\", "
      "\"threads\".\"dateTime\", "
      "\"threads\".\"fixed\" ");

    r += "FROM \"threads\"";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >::view_type >
  access::view_traits_impl< ::ThreadIdDateTimeFixed, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // Post
  //

  const char alias_traits<  ::Thread,
    id_sqlite,
    access::object_traits_impl< ::Post, id_sqlite >::thread_tag>::
  table_name[] = "\"thread\"";

  struct access::object_traits_impl< ::Post, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::Post, id_sqlite >::id_type
  access::object_traits_impl< ::Post, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::Post, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // board_
    //
    if (t[1UL])
    {
      i.board_value.capacity (i.board_size);
      grew = true;
    }

    // number_
    //
    t[2UL] = false;

    // dateTime_
    //
    if (t[3UL])
    {
      i.dateTime_value.capacity (i.dateTime_size);
      grew = true;
    }

    // bannedFor_
    //
    t[4UL] = false;

    // email_
    //
    if (t[5UL])
    {
      i.email_value.capacity (i.email_size);
      grew = true;
    }

    // files_
    //
    if (t[6UL])
    {
      i.files_value.capacity (i.files_size);
      grew = true;
    }

    // name_
    //
    if (t[7UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // password_
    //
    if (t[8UL])
    {
      i.password_value.capacity (i.password_size);
      grew = true;
    }

    // posterIp_
    //
    if (t[9UL])
    {
      i.posterIp_value.capacity (i.posterIp_size);
      grew = true;
    }

    // subject_
    //
    if (t[10UL])
    {
      i.subject_value.capacity (i.subject_size);
      grew = true;
    }

    // text_
    //
    if (t[11UL])
    {
      i.text_value.capacity (i.text_size);
      grew = true;
    }

    // thread_
    //
    t[12UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::Post, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // board_
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.board_value.data ();
    b[n].size = &i.board_size;
    b[n].capacity = i.board_value.capacity ();
    b[n].is_null = &i.board_null;
    n++;

    // number_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.number_value;
    b[n].is_null = &i.number_null;
    n++;

    // dateTime_
    //
    b[n].type = sqlite::image_traits<
      ::QDateTime,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.dateTime_value.data ();
    b[n].size = &i.dateTime_size;
    b[n].capacity = i.dateTime_value.capacity ();
    b[n].is_null = &i.dateTime_null;
    n++;

    // bannedFor_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.bannedFor_value;
    b[n].is_null = &i.bannedFor_null;
    n++;

    // email_
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.email_value.data ();
    b[n].size = &i.email_size;
    b[n].capacity = i.email_value.capacity ();
    b[n].is_null = &i.email_null;
    n++;

    // files_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.files_value.data ();
    b[n].size = &i.files_size;
    b[n].capacity = i.files_value.capacity ();
    b[n].is_null = &i.files_null;
    n++;

    // name_
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.name_value.data ();
    b[n].size = &i.name_size;
    b[n].capacity = i.name_value.capacity ();
    b[n].is_null = &i.name_null;
    n++;

    // password_
    //
    b[n].type = sqlite::bind::blob;
    b[n].buffer = i.password_value.data ();
    b[n].size = &i.password_size;
    b[n].capacity = i.password_value.capacity ();
    b[n].is_null = &i.password_null;
    n++;

    // posterIp_
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.posterIp_value.data ();
    b[n].size = &i.posterIp_size;
    b[n].capacity = i.posterIp_value.capacity ();
    b[n].is_null = &i.posterIp_null;
    n++;

    // subject_
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.subject_value.data ();
    b[n].size = &i.subject_size;
    b[n].capacity = i.subject_value.capacity ();
    b[n].is_null = &i.subject_null;
    n++;

    // text_
    //
    b[n].type = sqlite::image_traits<
      ::QString,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.text_value.data ();
    b[n].size = &i.text_size;
    b[n].capacity = i.text_value.capacity ();
    b[n].is_null = &i.text_null;
    n++;

    // thread_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.thread_value;
    b[n].is_null = &i.thread_null;
    n++;
  }

  void access::object_traits_impl< ::Post, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::Post, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      ::quint64 const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // board_
    //
    {
      ::QString const& v =
        o.board_;

      bool is_null (false);
      std::size_t cap (i.board_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.board_value,
        i.board_size,
        is_null,
        v);
      i.board_null = is_null;
      grew = grew || (cap != i.board_value.capacity ());
    }

    // number_
    //
    {
      ::quint64 const& v =
        o.number_;

      bool is_null (false);
      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_image (
        i.number_value,
        is_null,
        v);
      i.number_null = is_null;
    }

    // dateTime_
    //
    {
      ::QDateTime const& v =
        o.dateTime_;

      bool is_null (false);
      std::size_t cap (i.dateTime_value.capacity ());
      sqlite::value_traits<
          ::QDateTime,
          sqlite::id_text >::set_image (
        i.dateTime_value,
        i.dateTime_size,
        is_null,
        v);
      i.dateTime_null = is_null;
      grew = grew || (cap != i.dateTime_value.capacity ());
    }

    // bannedFor_
    //
    {
      bool const& v =
        o.bannedFor_;

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.bannedFor_value,
        is_null,
        v);
      i.bannedFor_null = is_null;
    }

    // email_
    //
    {
      ::QString const& v =
        o.email_;

      bool is_null (true);
      std::size_t cap (i.email_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.email_value,
        i.email_size,
        is_null,
        v);
      i.email_null = is_null;
      grew = grew || (cap != i.email_value.capacity ());
    }

    // files_
    //
    {
      ::QByteArray const& v =
        o.files_;

      bool is_null (true);
      std::size_t cap (i.files_value.capacity ());
      sqlite::value_traits<
          ::QByteArray,
          sqlite::id_blob >::set_image (
        i.files_value,
        i.files_size,
        is_null,
        v);
      i.files_null = is_null;
      grew = grew || (cap != i.files_value.capacity ());
    }

    // name_
    //
    {
      ::QString const& v =
        o.name_;

      bool is_null (true);
      std::size_t cap (i.name_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.name_value,
        i.name_size,
        is_null,
        v);
      i.name_null = is_null;
      grew = grew || (cap != i.name_value.capacity ());
    }

    // password_
    //
    {
      ::QByteArray const& v =
        o.password_;

      bool is_null (false);
      std::size_t cap (i.password_value.capacity ());
      sqlite::value_traits<
          ::QByteArray,
          sqlite::id_blob >::set_image (
        i.password_value,
        i.password_size,
        is_null,
        v);
      i.password_null = is_null;
      grew = grew || (cap != i.password_value.capacity ());
    }

    // posterIp_
    //
    {
      ::QString const& v =
        o.posterIp_;

      bool is_null (true);
      std::size_t cap (i.posterIp_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.posterIp_value,
        i.posterIp_size,
        is_null,
        v);
      i.posterIp_null = is_null;
      grew = grew || (cap != i.posterIp_value.capacity ());
    }

    // subject_
    //
    {
      ::QString const& v =
        o.subject_;

      bool is_null (true);
      std::size_t cap (i.subject_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.subject_value,
        i.subject_size,
        is_null,
        v);
      i.subject_null = is_null;
      grew = grew || (cap != i.subject_value.capacity ());
    }

    // text_
    //
    {
      ::QString const& v =
        o.text_;

      bool is_null (true);
      std::size_t cap (i.text_value.capacity ());
      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_image (
        i.text_value,
        i.text_size,
        is_null,
        v);
      i.text_null = is_null;
      grew = grew || (cap != i.text_value.capacity ());
    }

    // thread_
    //
    {
      ::QLazySharedPointer< ::Thread > const& v =
        o.thread_;

      typedef object_traits< ::Thread > obj_traits;
      typedef odb::pointer_traits< ::QLazySharedPointer< ::Thread > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          ptr_traits::object_id< ptr_traits::element_type  > (v));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.thread_value,
          is_null,
          id);
        i.thread_null = is_null;
      }
      else
        throw null_pointer ();
    }

    return grew;
  }

  void access::object_traits_impl< ::Post, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::quint64& v =
        o.id_;

      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // board_
    //
    {
      ::QString& v =
        o.board_;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.board_value,
        i.board_size,
        i.board_null);
    }

    // number_
    //
    {
      ::quint64& v =
        o.number_;

      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_value (
        v,
        i.number_value,
        i.number_null);
    }

    // dateTime_
    //
    {
      ::QDateTime& v =
        o.dateTime_;

      sqlite::value_traits<
          ::QDateTime,
          sqlite::id_text >::set_value (
        v,
        i.dateTime_value,
        i.dateTime_size,
        i.dateTime_null);
    }

    // bannedFor_
    //
    {
      bool& v =
        o.bannedFor_;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.bannedFor_value,
        i.bannedFor_null);
    }

    // email_
    //
    {
      ::QString& v =
        o.email_;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.email_value,
        i.email_size,
        i.email_null);
    }

    // files_
    //
    {
      ::QByteArray& v =
        o.files_;

      sqlite::value_traits<
          ::QByteArray,
          sqlite::id_blob >::set_value (
        v,
        i.files_value,
        i.files_size,
        i.files_null);
    }

    // name_
    //
    {
      ::QString& v =
        o.name_;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // password_
    //
    {
      ::QByteArray& v =
        o.password_;

      sqlite::value_traits<
          ::QByteArray,
          sqlite::id_blob >::set_value (
        v,
        i.password_value,
        i.password_size,
        i.password_null);
    }

    // posterIp_
    //
    {
      ::QString& v =
        o.posterIp_;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.posterIp_value,
        i.posterIp_size,
        i.posterIp_null);
    }

    // subject_
    //
    {
      ::QString& v =
        o.subject_;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.subject_value,
        i.subject_size,
        i.subject_null);
    }

    // text_
    //
    {
      ::QString& v =
        o.text_;

      sqlite::value_traits<
          ::QString,
          sqlite::id_text >::set_value (
        v,
        i.text_value,
        i.text_size,
        i.text_null);
    }

    // thread_
    //
    {
      ::QLazySharedPointer< ::Thread >& v =
        o.thread_;

      typedef object_traits< ::Thread > obj_traits;
      typedef odb::pointer_traits< ::QLazySharedPointer< ::Thread > > ptr_traits;

      if (i.thread_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.thread_value,
          i.thread_null);

        v = ptr_traits::pointer_type (
          *static_cast<sqlite::database*> (db), id);
      }
    }
  }

  void access::object_traits_impl< ::Post, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          ::quint64,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::Post, id_sqlite >::persist_statement[] =
  "INSERT INTO \"posts\" "
  "(\"id\", "
  "\"board\", "
  "\"number\", "
  "\"dateTime\", "
  "\"bannedFor\", "
  "\"email\", "
  "\"files\", "
  "\"name\", "
  "\"password\", "
  "\"posterIp\", "
  "\"subject\", "
  "\"text\", "
  "\"thread\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::Post, id_sqlite >::find_statement[] =
  "SELECT "
  "\"posts\".\"id\", "
  "\"posts\".\"board\", "
  "\"posts\".\"number\", "
  "\"posts\".\"dateTime\", "
  "\"posts\".\"bannedFor\", "
  "\"posts\".\"email\", "
  "\"posts\".\"files\", "
  "\"posts\".\"name\", "
  "\"posts\".\"password\", "
  "\"posts\".\"posterIp\", "
  "\"posts\".\"subject\", "
  "\"posts\".\"text\", "
  "\"posts\".\"thread\" "
  "FROM \"posts\" "
  "WHERE \"posts\".\"id\"=?";

  const char access::object_traits_impl< ::Post, id_sqlite >::update_statement[] =
  "UPDATE \"posts\" "
  "SET "
  "\"board\"=?, "
  "\"number\"=?, "
  "\"dateTime\"=?, "
  "\"bannedFor\"=?, "
  "\"email\"=?, "
  "\"files\"=?, "
  "\"name\"=?, "
  "\"password\"=?, "
  "\"posterIp\"=?, "
  "\"subject\"=?, "
  "\"text\"=?, "
  "\"thread\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::Post, id_sqlite >::erase_statement[] =
  "DELETE FROM \"posts\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::Post, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"posts\".\"id\",\n"
  "\"posts\".\"board\",\n"
  "\"posts\".\"number\",\n"
  "\"posts\".\"dateTime\",\n"
  "\"posts\".\"bannedFor\",\n"
  "\"posts\".\"email\",\n"
  "\"posts\".\"files\",\n"
  "\"posts\".\"name\",\n"
  "\"posts\".\"password\",\n"
  "\"posts\".\"posterIp\",\n"
  "\"posts\".\"subject\",\n"
  "\"posts\".\"text\",\n"
  "\"posts\".\"thread\"\n"
  "FROM \"posts\"\n"
  "LEFT JOIN \"threads\" AS \"thread\" ON \"thread\".\"id\"=\"posts\".\"thread\"";

  const char access::object_traits_impl< ::Post, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"posts\"";

  const char access::object_traits_impl< ::Post, id_sqlite >::table_name[] =
  "\"posts\"";

  void access::object_traits_impl< ::Post, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::Post, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::Post, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::Post, id_sqlite >::pointer_type
  access::object_traits_impl< ::Post, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Post, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Post, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Post, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::Post, id_sqlite >::object_type >
  access::object_traits_impl< ::Post, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Post, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // PostCount
  //

  bool access::view_traits_impl< ::PostCount, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::PostCount, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;
  }

  void access::view_traits_impl< ::PostCount, id_sqlite >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      int& v =
        o.count;

      sqlite::value_traits<
          int,
          sqlite::id_integer >::set_value (
        v,
        i.count_value,
        i.count_null);
    }
  }

  access::view_traits_impl< ::PostCount, id_sqlite >::query_base_type
  access::view_traits_impl< ::PostCount, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(\"posts\".\"id\") ");

    r += "FROM \"posts\"";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::PostCount, id_sqlite >::view_type >
  access::view_traits_impl< ::PostCount, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"posts\"");
          db.execute ("DROP TABLE IF EXISTS \"threads\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"threads\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"board\" TEXT NOT NULL,\n"
                      "  \"number\" INTEGER NOT NULL,\n"
                      "  \"dateTime\" TEXT NOT NULL,\n"
                      "  \"fixed\" INTEGER NOT NULL,\n"
                      "  \"postingEnabled\" INTEGER NOT NULL)");
          db.execute ("CREATE TABLE \"posts\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"board\" TEXT NOT NULL,\n"
                      "  \"number\" INTEGER NOT NULL,\n"
                      "  \"dateTime\" TEXT NOT NULL,\n"
                      "  \"bannedFor\" INTEGER NOT NULL,\n"
                      "  \"email\" TEXT NULL,\n"
                      "  \"files\" BLOB NULL,\n"
                      "  \"name\" TEXT NULL,\n"
                      "  \"password\" BLOB NOT NULL,\n"
                      "  \"posterIp\" TEXT NULL,\n"
                      "  \"subject\" TEXT NULL,\n"
                      "  \"text\" TEXT NULL,\n"
                      "  \"thread\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"thread_fk\"\n"
                      "    FOREIGN KEY (\"thread\")\n"
                      "    REFERENCES \"threads\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_sqlite,
    "",
    &create_schema);
}

#include <odb/post.hxx>
